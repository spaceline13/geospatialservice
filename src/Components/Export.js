import React, {Component} from 'react';
import Select from "react-simpler-select";
import XLSX from "xlsx";
import GeoJSON from 'geojson';
import fileDownload from 'js-file-download';
import geomend from 'geojson-mend';

class Export extends Component {
    constructor(props) {
        super(props);
        this.enableGeoJSON = this.props.parent.generatedBoundariesColumn || (this.props.parent.geoJSONpoints&&this.props.parent.geoJSONpoints[0]&&this.props.parent.geoJSONpoints[1]);
        this.state ={
            formats:[{label:'XLS', value:'xls'},{label:'CSV', value:'csv'}],
            currentFormat:'',
            highResolution:false,
            loading:false
        };
        if(this.enableGeoJSON){
            this.state.formats.unshift({label:'geoJSON', value:'geojson'});
        }
        this.export = this.export.bind(this);
        this.generateGeoJSON = this.generateGeoJSON.bind(this);
        this.generateCSV = this.generateCSV.bind(this);
        this.selectFormat = this.selectFormat.bind(this);
        this.loader = this.loader.bind(this);
        this.setResolution = this.setResolution.bind(this);
    };
    export (){
        if(this.state.currentFormat=='xls'){
            XLSX.writeFile({ SheetNames:['sheet1'], Sheets:{'sheet1':XLSX.utils.aoa_to_sheet(this.props.parent.state.outData)}}, this.props.parent.state.excelFile.name.replace(/\.[^/.]+$/, "")+'_generated.xlsx');
        } else if(this.state.currentFormat=='csv'){
            this.generateCSV();
        } else if (this.state.currentFormat=='geojson'){
            this.generateGeoJSON();
        }

        //ANALYTICS
        this.props.parent.googleAnalytics.event({
            category: 'User',
            action: 'EXPORTED DATASET'
        });
    }
    generateCSV(){
        var s = XLSX.utils.sheet_to_csv(XLSX.utils.aoa_to_sheet(this.props.parent.state.outData));

        var csv = new ArrayBuffer(s.length);
        var view = new Uint8Array(csv);
        for (var i=0; i!=s.length; ++i) view[i] = s.charCodeAt(i) & 0xFF;

        var file = new Blob([csv], {type: "application/octet-stream"});
        fileDownload(file,  this.props.parent.state.excelFile.name.replace(/\.[^/.]+$/, "")+'_generated.csv' );
    }
    generateGeoJSON(){
        var headers = this.props.parent.state.outOptions;
        var data = this.props.parent.state.outData;
        var output = [];
        var geoPoints = null;
        var me = this;
        //construct the output json
        for (var line=1; line<data.length; line++){
            var curObj = {};
            for (var column=0; column<headers.length; column++){
                var headerName = headers[column]['headerName'];
                curObj[headerName] = data[line][column];
            }
            output.push(curObj);
        }
        if((this.props.parent.geoJSONpoints&&this.props.parent.geoJSONpoints[0]&&this.props.parent.geoJSONpoints[1])){

            //if a specific column contains both lat and long
            if(this.props.parent.geoJSONpoints[0]==this.props.parent.geoJSONpoints[1]){
                //make extra columns for fields that contain both lat and long
                var latlngheader = '';
                var latlngarray = [];
                //specify the header that contains both lat and long (latlngheader)
                for (var column=0; column<headers.length; column++){
                    var headerName = headers[column]['headerName'];
                    if (headerName == this.props.parent.geoJSONpoints[0]){
                        latlngheader = headerName;
                    }
                }
                //split the data of this column to seperate lat and long and add them to a new column (autogeneratedlat etc.)
                for (var line=0; line<output.length; line++){
                    var latlng = output[line][latlngheader];
                    if(latlng.indexOf(', ')!=-1)
                        latlngarray = latlng.split(', ');
                    else if(latlng.indexOf(' ')!=-1)
                        latlngarray = latlng.split(' ');
                    if(typeof latlngarray[0] != 'number')
                        output[line]['autogeneratedlat'] = parseFloat(latlngarray[0].replace(',', '.'));
                    if(typeof latlngarray[1] != 'number')
                        output[line]['autogeneratedlng'] = parseFloat(latlngarray[1].replace(',', '.'));
                }
                geoPoints = ['autogeneratedlat','autogeneratedlng'];
            } else {
                var latCol = null;
                var lngCol = null;
                for (var line=0; line<output.length; line++){
                    latCol = this.props.parent.geoJSONpoints[0];
                    lngCol = this.props.parent.geoJSONpoints[1];
                    console.log(latCol,lngCol,output[line]);
                    console.log(typeof output[line][latCol]);
                    output[line][latCol] = ((typeof output[line][latCol]) != 'number')&&((typeof output[line][latCol]) != 'undefined') ?
                                                                            parseFloat(output[line][latCol].replace(',', '.'))
                                                                        :
                                                                            output[line][latCol];
                    output[line][lngCol] = ((typeof output[line][lngCol]) != 'number')&&((typeof output[line][lngCol]) != 'undefined') ?
                                                                            parseFloat(output[line][lngCol].replace(',', '.'))
                                                                        :
                                                                            output[line][lngCol];
                }
            }
            if(!geoPoints){ //if it hasn't already set from autogenerated columns
                geoPoints = this.props.parent.geoJSONpoints;
            }
            //export the file
            GeoJSON.parse(output, {Point: geoPoints}, function(geojson){
                var file = new Blob([JSON.stringify(geojson)], {type: 'application/json'});
                fileDownload(file, me.props.parent.state.excelFile.name.replace(/\.[^/.]+$/, "")+'_geoJSON.json', );
            });
        } else if(this.props.parent.generatedBoundariesColumn){
            console.log(output,data);
            //make feature collection
            var geojson = {type: "FeatureCollection", features: []};
            for (var line=0; line<output.length; line++){
                var newFeature = {
                    type: 'Feature',
                    geometry: this.state.highResolution?output[line][this.props.parent.generatedBoundariesColumn]:geomend.nReduce(geomend.nDecimals(output[line][this.props.parent.generatedBoundariesColumn],6),0.005), //geometry polygon etc   reduced resolution
                    properties: {}
                };
                //add the columns properties (rest columns that do not contain coords)
                for(var col in output[0]){
                    if(col!==this.props.parent.generatedBoundariesColumn){
                        newFeature.properties[col] = output[line][col];
                    }
                }
                geojson.features.push(newFeature);
            }
            console.log(geojson);
            var file = new Blob([JSON.stringify(geojson)], {type: 'application/json'});
            fileDownload(file, me.props.parent.state.excelFile.name.replace(/\.[^/.]+$/, "")+'_geoJSON.json', );
        } else {
            alert('You did not select point columns (latitude and longtitude) in the previous steps. Please rerun the app and specify point columns.')
        }
    }
    loader(value){
        this.setState({loading:value});
    }
    selectFormat(format){
        this.setState({currentFormat:format});
    }
    setResolution(value){
        this.setState({highResolution:value});
    }
    render() {
        return (
            <div>
                <div className='saveAndExportDiv' style={this.state.loading?{display:'none'}:{display:'block'}}>
                    <span className='saveAndExportSpan'>
                        &nbsp; Select the format you want to export the dataset
                        <Select
                            placeholder="Format"
                            value={this.state.currentFormat}
                            options={this.state.formats}
                            isOptionDisabled={(option) => option.disabled }
                            onChange={(value)=>{this.selectFormat(value)}}
                        />
                    </span>
                    {(this.state.currentFormat == 'geojson') &&
                    <center>
                        <div style={{maxWidth:'900px',fontFamily:'sans-serif',marginTop:'30px'}}>
                            <input type="checkbox" name="resolution" value="high" onChange={(e)=>{this.setResolution(e.target.checked)}}/> High Resolution Geometry <i style={{color:'grey'}}>(Warning: Checking this might result in huge file sizes, unusable in some other tools)</i>
                        </div>
                    </center>
                    }
                    {(!this.enableGeoJSON)&&
                        <center>
                            <div style={{marginTop: '50px',width: '800px',color: '#ffa9a9', fontFamily:'\'Didact Gothic\', sans-serif'}}>
                                * You have to include both longitute and latitude columns and select the option to export them for geoJSON generation or select the "generate location/boundaries" action to enable the geoJSON export option
                            </div>
                        </center>
                    }
                </div>
                    <div className='footer'>
                        <button className="button-exit" onClick={(e)=>{window.location.reload()}}>Cancel</button>
                        <div className='button-container'>
                            <button
                                onClick={()=>{
                                    this.export();
                                    this.props.jumpToStep(4);
                                }}
                                disabled={this.state.currentFormat==''}
                                className={(this.state.currentFormat!='') ? 'nextButton' : 'disabled nextButton'}
                                >
                                <i className="fas fa-step-forward"></i>
                            </button>
                        </div>
                    </div>
                <div style={this.state.loading?{display:'block'}:{display:'none'}}>
                    Loading...
                </div>
            </div>
        );
    };
};

export default Export;